import unittest
import pandas as pd
from analysis import top5, orders_per_day, client_connections

class TestAnalysisFunctions(unittest.TestCase):
    """
    Юнит-тесты для проверки работоспособности функций analysis.py.
    """

    def test_top5_functionality(self):
        """
        Тестирует правильность функционирования функции `top5`.

        Данный тест проверяет, что функция возвращает правильные имена пяти наиболее активных клиентов и корректно формирует DataFrame.
        """
        # Тестовые входные данные для top5
        input_data = [
            ([(1, 'Иван Иванов', 'ivan@example.com', '89025652154'), (4, 'test', 'test@test.ru', '89052000000'),
              (12, 'Петя', 'petr@server.com', '12345678901'), (13, 'Вася', 'vasya@server.com', '12345678901'),
              (14, '123', 'peter@server.ru', '12345609870'), (16, 'Петя Петров', 'per@111.com', '12345678901'),
              (17, 'Василий Сталин', '11@111.com', '12345678901'),
              (20, 'Сидор Лютый', 'peter@server.com', '12345678901'), (21, 'Сидор', '11@1111.com', '+71234567890'),
              (22, 'Василий Цыган', 'test@test.com', '12345678901'), (23, 'Alex', 'alex@alex.com', '+79021000000'),
              (24, 'Свинтус', 'svin@ferma.ru', '+78889997771')],
             ['id', 'name', 'email', 'phone']),  # Клиенты
            ([(1, 12, '2025-08-21 04:57:55', 'Новый', 277745.0), (4, 14, '2025-08-21 04:57:06', 'Новый', 22345.0),
              (5, 20, '2025-08-21 04:57:33', 'Оплачен', 232456.0), (6, 14, '2025-08-21 05:03:23', 'Новый', 66978.0),
              (10, 16, '2025-08-21 04:55:53', 'Новый', 44624.0), (11, 13, '2025-08-21 05:59:17', 'Новый', 120.0),
              (12, 13, '2025-08-20 02:07:24', 'Отправлен', 111.0), (13, 12, '2025-08-21 05:58:57', 'Новый', 44846.0),
              (14, 17, '2025-08-20 11:36:32', 'Новый', 112.0), (15, 4, '2025-08-20 11:37:02', 'Новый', 465068.0),
              (16, 13, '2025-08-20 14:18:04', 'Новый', 22423.0), (17, 16, '2025-08-20 14:32:15', 'Новый', 1370.1),
              (18, 12, '2025-08-21 10:45:21', 'Новый', 399.6), (19, 13, '2025-08-21 10:48:43', 'Новый', 75.6),
              (20, 17, '2025-08-21 10:50:07', 'Новый', 411.0), (21, 21, '2025-08-23 18:30:49', 'Новый', 23011.0),
              (22, 23, '2025-08-23 19:06:39', 'Новый', 33.0), (23, 16, '2025-08-23 19:11:48', 'Новый', 33.6),
              (24, 13, '2025-08-23 19:12:42', 'Новый', 555.0)],
             ['id', 'customer_id', 'date_created', 'status', 'total_amount'])  # Заказы
        ]
        result = top5(input_data)

        # Проверяем результат
        self.assertTrue(isinstance(result, pd.DataFrame))
        self.assertEqual(len(result), 5)
        self.assertIn('number_of_orders', result.columns)
        expected_names = ['Вася', 'Петя', 'Петя Петров', '123', 'Василий Сталин']
        actual_names = result['name'].tolist()
        self.assertListEqual(expected_names, actual_names)

    def test_orders_per_day_functionality(self):
        """
        Тестирует правильность работы функции `orders_per_day`.

        Данный тест проверяет, что функция возвращает верный набор данных по количеству заказов за каждую дату.
        """
        # Тестовые входные данные для метода orders_per_day
        input_data = (
            [
                (1, 12, '2025-08-21 04:57:55', 'Новый', 277745.0), (4, 14, '2025-08-21 04:57:06', 'Новый', 22345.0),
                (5, 20, '2025-08-21 04:57:33', 'Оплачен', 232456.0), (6, 14, '2025-08-21 05:03:23', 'Новый', 66978.0),
                (10, 16, '2025-08-21 04:55:53', 'Новый', 44624.0), (11, 13, '2025-08-21 05:59:17', 'Новый', 120.0),
                (12, 13, '2025-08-20 02:07:24', 'Отправлен', 111.0), (13, 12, '2025-08-21 05:58:57', 'Новый', 44846.0),
                (14, 17, '2025-08-20 11:36:32', 'Новый', 112.0), (15, 4, '2025-08-20 11:37:02', 'Новый', 465068.0),
                (16, 13, '2025-08-20 14:18:04', 'Новый', 22423.0), (17, 16, '2025-08-20 14:32:15', 'Новый', 1370.1),
                (18, 12, '2025-08-21 10:45:21', 'Новый', 399.6), (19, 13, '2025-08-21 10:48:43', 'Новый', 75.6),
                (20, 17, '2025-08-21 10:50:07', 'Новый', 411.0), (21, 21, '2025-08-23 18:30:49', 'Новый', 23011.0),
                (22, 23, '2025-08-23 19:06:39', 'Новый', 33.0), (23, 16, '2025-08-23 19:11:48', 'Новый', 33.6),
                (24, 13, '2025-08-23 19:12:42', 'Новый', 555.0)
            ],
            ['id', 'customer_id', 'date_created', 'status', 'total_amount']
        )

        result = orders_per_day(input_data)

        # Проверяем результат
        self.assertTrue(isinstance(result, pd.DataFrame))
        self.assertEqual(len(result), 3)
        self.assertIn('date_created', result.columns)
        self.assertIn('counts', result.columns)
        expected_dates = ['20-08-2025', '21-08-2025', '23-08-2025']
        actual_dates = result['date_created'].tolist()
        self.assertListEqual(expected_dates, actual_dates)

    def test_client_connections_functionality(self):
        """
        Тестирует правильность работы функции `client_connections`.

        Данный тест проверяет, что функция создает валидные соединения между клиентами на основе общих товаров в заказах.
        """
        # Тестовые входные данные для client_connections
        input_data = [
            ([(1, 'Иван Иванов', 'ivan@example.com', '89025652154'), (4, 'test', 'test@test.ru', '89052000000'),
              (12, 'Петя', 'petr@server.com', '12345678901'), (13, 'Вася', 'vasya@server.com', '12345678901'),
              (14, '123', 'peter@server.ru', '12345609870'), (16, 'Петя Петров', 'per@111.com', '12345678901'),
              (17, 'Василий Сталин', '11@111.com', '12345678901'),
              (20, 'Сидор Лютый', 'peter@server.com', '12345678901'), (21, 'Сидор', '11@1111.com', '+71234567890'),
              (22, 'Василий Цыган', 'test@test.com', '12345678901'), (23, 'Alex', 'alex@alex.com', '+79021000000'),
              (24, 'Свинтус', 'svin@ferma.ru', '+78889997771')],
             ['id', 'name', 'email', 'phone']),  # Клиенты
            ([(1, 'Килька', 345.0, 2130), (3, 'Масло', 33.6, 9), (5, 'Молоко', 21.0, 0), (6, 'Колбаса', 33.0, 329),
              (8, 'Тушенка', 111.0, 7), (9, 'Лососина', 232423.0, 1), (10, 'Хлеб', 23.0, 2321),
              (12, 'Икра черная', 22312.0, 132121), (14, 'Сыр', 500.0, 25), (16, 'Свинина', 456.7, 9),
              (17, 'Икра кабачковая', 233.0, 1210)],
             ['id', 'name', 'price', 'quantity']),  # Продукты
            ([(1, 12, '2025-08-21 04:57:55', 'Новый', 277745.0), (4, 14, '2025-08-21 04:57:06', 'Новый', 22345.0),
              (5, 20, '2025-08-21 04:57:33', 'Оплачен', 232456.0), (6, 14, '2025-08-21 05:03:23', 'Новый', 66978.0),
              (10, 16, '2025-08-21 04:55:53', 'Новый', 44624.0), (11, 13, '2025-08-21 05:59:17', 'Новый', 120.0),
              (12, 13, '2025-08-20 02:07:24', 'Отправлен', 111.0), (13, 12, '2025-08-21 05:58:57', 'Новый', 44846.0),
              (14, 17, '2025-08-20 11:36:32', 'Новый', 112.0), (15, 4, '2025-08-20 11:37:02', 'Новый', 465068.0),
              (16, 13, '2025-08-20 14:18:04', 'Новый', 22423.0), (17, 16, '2025-08-20 14:32:15', 'Новый', 1370.1),
              (18, 12, '2025-08-21 10:45:21', 'Новый', 399.6), (19, 13, '2025-08-21 10:48:43', 'Новый', 75.6),
              (20, 17, '2025-08-21 10:50:07', 'Новый', 411.0), (21, 21, '2025-08-23 18:30:49', 'Новый', 23011.0),
              (22, 23, '2025-08-23 19:06:39', 'Новый', 33.0), (23, 16, '2025-08-23 19:11:48', 'Новый', 33.6),
              (24, 13, '2025-08-23 19:12:42', 'Новый', 555.0)],
             ['id', 'customer_id', 'date_created', 'status', 'total_amount']),  # Заказы
            ([(1, 1, 5, 1), (2, 1, 6, 2), (3, 1, 8, 1), (4, 1, 9, 1), (5, 1, 12, 1), (6, 1, 12, 1), (7, 1, 14, 1),
              (8, 4, 6, 1), (9, 4, 12, 1), (10, 5, 6, 1), (11, 5, 9, 1), (12, 6, 5, 2), (13, 6, 12, 3), (14, 10, 8, 2),
              (15, 10, 12, 2), (16, 11, 5, 1), (17, 11, 6, 3), (18, 12, 8, 1), (19, 13, 8, 2), (20, 13, 12, 2),
              (21, 14, 6, 2), (22, 14, 10, 2), (23, 15, 8, 2), (24, 15, 9, 2), (25, 16, 8, 1), (26, 16, 12, 1),
              (27, 17, 16, 3), (28, 18, 1, 1), (29, 18, 3, 1), (30, 18, 5, 1), (31, 19, 3, 1), (32, 19, 5, 2),
              (33, 20, 1, 1), (34, 20, 6, 2), (35, 21, 12, 1), (36, 21, 17, 3), (37, 22, 6, 1), (38, 23, 3, 1),
              (39, 24, 8, 5)],
             ['id', 'order_id', 'product_id', 'quantity'])  # Позиции заказов
        ]
        result = client_connections(input_data)

        # Проверяем результат
        self.assertIsNotNone(result)
        self.assertGreater(len(result), 0)
        first_edge = result[0]
        self.assertEqual(first_edge[:2], ('123', 'Alex'))
        self.assertIsInstance(first_edge[-1], float)

if __name__ == "__main__":
    unittest.main()